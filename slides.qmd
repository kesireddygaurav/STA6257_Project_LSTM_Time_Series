---
title: "Temperature Forecasting Using Long Short Term Memory (LSTM)"
author: "Gaurav Kesireddy, Fariha Moomtaheen, Nitul Singha"
date: '`r Sys.Date()`'
format: revealjs
editor: visual
course: STA 6257 - Advanced Statistical Modeling
bibliography: references.bib # file contains bibtex for references
#always_allow_html: true # this allows to get PDF with HTML features
self-contained: true
execute: 
  warning: false
  message: false
---

## Introduction

-   Long Short-Term Memory(LSTM) is a gated Recurrent Neural Network (RNN) designed to address issues related to long-term dependencies and the problems of gradient vanishing or exploding present in traditional RNNs by [@hochreiter1997long].

-   By incorporating forget gates, input gates, and output gates, LSTM can selectively retain crucial information from time series data based on its features while disregarding irrelevant information.

-   The central idea is a memory cell which can maintain its state over time, and non-linear gating units which regulate the information flow into and out of the cell [@greff2016lstm].

## Introduction Cont..

-   LSTM has been utilized in tasks like text categorization, sentence generation, and machine translation [@zhu2019novel].

-   Early on, linear models like Auto-Regressive (AR), Moving Average (MA), and Auto-Regressive Moving Average (ARMA) were proposed for time series forecasting [@wadhvani2017review][@mo2016model][@ge2016short].

-   The Auto-Regressive Integrated Moving Average (ARIMA) model was introduced [@ho1998use], which combines differencing operations to handle non-stationary data.

## Methods

![](Vanilla_LSTM.png){top="100" right="100" fig-align="center" width="691" height="306"}

**Figure 1** Architecture of a typical vanilla LSTM block [@van2020review].

## Methods Cont..

-   The LSTM architecture consists of a set of recurrently connected sub-networks, known as memory blocks.

-   The idea behind the memory block is to maintain its state over time and regulate the information flow through non-linear gating units.

-   The output of the block is recurrently connected back to the block input and all of the gates.

## Methods Cont..

Lets assume a network comprising N processing blocks and M inputs. The forward pass is this recurrent neural system is described in 6 parts.

**Block input**. This step involves updating the block input component which combines the current input $x^{(t)}$ and the output of that LSTM unit $y^{(t-1)}$ in the last iteration. This can be done as shown below: $$z^{(t)} = g(W_zx^{(t)} + R_zy^{(t-1)} + b_z)    -     (1) $$

## Methods Cont..

**Input gate**. During this step, we update the input gate that combines the current input $x^{(t)}$, the output of that LSTM unit $y^{(t-1)}$ and the cell value $c^{(t-1)}$ in the last iteration. This can be done as shown below: $$i_{(t)} =\sigma(W_ix^{(t)} + R_iy^{(t-1)} + p_i.c^{(t-1)} + b_i ) -(2) $$

## Methods Cont..

**Forget gate**. During this step, the LSTM unit determines which information should be removed from its previous cell states $c^{(t-1)}$. Therefore, the activation values $f^{(t)}$ of the forget gates at the time step *t* are calculated based on the current input $x^{(t)}$, the outputs $y^{(t-1)}$ and the state $c^{(t-1)}$ of the memory cells at the previous time step (t-1), the peephole connections, and the bias terms $b_f$ of the forget gates. This can be done as shown below: $$  f_{(t)} = \sigma(W_fx^{(t)} + R_fy^{(t-1)} + p_f.c^{(t-1)} + b_f ) -(3)     $$

## Methods Cont..

**Cell**. This step computes the cell values, which combines the block input $z^{(t)}$, the input gate $i^{(t)}$ and the forget gate $f_{(t)}$ with the previous cell value. This can be done as shown below:

$$  c^{(t)} = z^{(t)}. i^{(t)} + c^{(t-1)}.f^{(t)}-(4) $$

## Methods Cont..

**Output gate**. This step calculates the output gate, which combines the current input $x^{(t)}$, the output of that LSTM unit $y^{(t-1)}$ and the cell value $c^{(t-1)}$ in the last iteration. This can be done as shown below:

$$  o^{(t)} = \sigma(W_ox^{(t)} + R_oy^{(t-1)} + p_o.c^{(t-1)} + b_o ) -(5) $$

## Methods Cont..

**Block output**. Finally, we calculate the block output, which combines the current cell value $c^{(t)}$ with the current output gate value as follows:

$$ y^{(t)} = g(c^{(t)}). o^{(t)}-(6) $$ In the above steps, $\sigma$, g and h denote point-wise non-linear activation functions.

-   The logistic sigmoid $\sigma(x) = 1/(1+e^{1-x})$ is used as a gate activation function and the hyperbolic tangent $g(x)= h(x)= tanh(x)$ is often used as the block input and output activation function[@van2020review].

## Dataset Description

-   The weather forecasting dataset for Indian climate in the city of Delhi, India, covers a period from 1st January 2013 to 24th April 2017.

-   The dataset includes four key parameters, each providing insights into the weather conditions during this time frame. These are mean temp, humidity, wind speed, mean pressure.

-   We have considered only 'Mean temperature (meantemp)' for this analysis. So we have removed all other attributes from the database.

## Dataset Description Cont..

```{r}
library(tidyverse) 
library(ggplot2)
library(tensorflow)
library(keras)
```

First six observations of the dataset are

```{r}
mean_temp <- read.csv("DailyDelhiMeanTemp.csv")
mean_temp %>% head()
```

**About the Dataset:** The dataset was collected from the Weather Underground API and prepared as a part of Assignment 4 of the Data Analytics Course in 2019 at PES University, Bangalore. It is important to note that the ownership and credit for this dataset belong to Weather Underground due to its data source.

## Visualization

The time series plot of the dataset is given below with **date** on x-axis and **meantemp** on y-axis respectively.

```{r}
mean_temp$date <- as.Date(mean_temp$date, format = "%m/%d/%Y")

mean_temp$meantemp <- as.numeric(mean_temp$meantemp)


ggplot(mean_temp, aes(x = date, y = meantemp)) +
  geom_line() +
  labs(x = "Date", y = "Mean Temperature") +
  ggtitle("Mean Temperature Over Time") +
  theme(plot.title = element_text(hjust = 0.5))
```

## Statistical Modeling

We have used Min-Max transformation for data preparation. Here, we have used one LSTM layer as a simple LSTM model and a Dense layer is used as the output layer. Then, compile the model using the loss function, optimizer and metrics. This package is based on Keras and TensorFlow modules.[@paul2021performance]

## Min-Max Transformation

```{r}

# Perform min-max transformation on 'meantemp' column and store in a new column 'transformed'
mean_temp$transformed <- (mean_temp$meantemp - min(mean_temp$meantemp)) / (max(mean_temp$meantemp) - min(mean_temp$meantemp))

```

We performed min-max transformation on our Mean Temperature to keep it in the range from (-1 to 1) as we are going to use *tanh* Gate for our model.

![](Tanh_Image.png){top="100" right="100" fig-align="center" width="691" height="306"}

## Coding and Tuning

Usage: ts.lstm(ts=df\$transformed, tsLag=5, LSTMUnits=7, DropoutRate = 0.1, Epochs = 10, CompLoss = "mse", CompMetrics = "mae", ActivationFn = "tanh", SplitRatio = 0.99, ValidationSplit = 0.2)

![](LSTMconclusion.png){top="100" right="100" fig-align="center" width="586" height="337"}

## Lag=50

```{r}
library(TSLSTM)

df <- mean_temp

df$date<-as.Date(df$date)

df$transformed<-as.numeric(df$transformed)

# Convert the data to a time series object (ts)
ts_data <- ts(df$transformed)
 
TSLSTM <- ts.lstm(ts=ts_data,
                 tsLag=50,
                 LSTMUnits=7,
                 DropoutRate = 0.1,
                 Epochs = 10,
                 CompLoss = "mse",
                 CompMetrics = "mae",
                 ActivationFn = "tanh",
                 SplitRatio = 0.99,
                 ValidationSplit = 0.2)
 
#Return function
trainFittedValue <- TSLSTM$TrainFittedValue
testPredictedValue <- TSLSTM$TestPredictedValue
accuracyTable <- TSLSTM$AccuracyTable

Result50<-tail(df,15)

Result50$S_pred<-testPredictedValue

Result50$Prediction= Result50$S_pred * ( max(df$meantemp) - min(df$meantemp) ) + min(df$meantemp)
```

```{r}
Result50$date <- as.Date(Result50$date)
# Calculate label positions
label_pos <- data.frame(label = c("Original", "Prediction"),
                        y = c(max(Result50$meantemp), max(Result50$Prediction)),
                        label_color = c("blue", "red"))
ggplot(data = Result50) +
  geom_line(aes(x = date, y = meantemp), color = "blue") +
  geom_line(aes(x = date, y = Prediction), color = "red") +
  labs(x = "Date", y = "Mean Temperature (Â°C)",  # Updated y-axis label with units
       title = "Original Temperature Over Time for Lag 50") +  # Plot title
  annotate("text", x = max(Result50$date) + 1, y = label_pos$y, 
           label = label_pos$label, color = label_pos$label_color, vjust = 0.5) +
  theme(axis.text.y = element_text(size = 12),   # Set font size for y-axis tick labels
        axis.title.y = element_text(size = 14),  # Set font size for y-axis label
        axis.text.x = element_text(size = 12),   # Set font size for x-axis tick labels
        axis.title.x = element_text(size = 14),  # Set font size for x-axis label
        plot.title = element_text(size = 16, hjust = 0.5))  # Set font size for plot title
```

## Lag=40

```{r}
library(TSLSTM)

df <- mean_temp

df$date<-as.Date(df$date)

df$transformed<-as.numeric(df$transformed)

# Convert the data to a time series object (ts)
ts_data <- ts(df$transformed)
 
TSLSTM <- ts.lstm(ts=ts_data,
                 tsLag=40,
                 LSTMUnits=7,
                 DropoutRate = 0.1,
                 Epochs = 10,
                 CompLoss = "mse",
                 CompMetrics = "mae",
                 ActivationFn = "tanh",
                 SplitRatio = 0.99,
                 ValidationSplit = 0.2)
 
#Return function
trainFittedValue <- TSLSTM$TrainFittedValue
testPredictedValue <- TSLSTM$TestPredictedValue
accuracyTable <- TSLSTM$AccuracyTable

Result40<-tail(df,15)

Result40$S_pred<-testPredictedValue

Result40$Prediction= Result40$S_pred * ( max(df$meantemp) - min(df$meantemp) ) + min(df$meantemp)
```

```{r}
Result40$date <- as.Date(Result40$date)
# Calculate label positions
label_pos <- data.frame(label = c("Original", "Prediction"),
                        y = c(max(Result40$meantemp), max(Result40$Prediction)),
                        label_color = c("blue", "red"))
ggplot(data = Result40) +
  geom_line(aes(x = date, y = meantemp), color = "blue") +
  geom_line(aes(x = date, y = Prediction), color = "red") +
  labs(x = "Date", y = "Mean Temperature (Â°C)",  # Updated y-axis label with units
       title = "Original Temperature Over Time for Lag 40") +  # Plot title
  annotate("text", x = max(Result40$date) + 1, y = label_pos$y, 
           label = label_pos$label, color = label_pos$label_color, vjust = 0.5) +
  theme(axis.text.y = element_text(size = 12),   # Set font size for y-axis tick labels
        axis.title.y = element_text(size = 14),  # Set font size for y-axis label
        axis.text.x = element_text(size = 12),   # Set font size for x-axis tick labels
        axis.title.x = element_text(size = 14),  # Set font size for x-axis label
        plot.title = element_text(size = 16, hjust = 0.5))  # Set font size for plot title
```

## Lag=30

```{r}
library(TSLSTM)

df <- mean_temp

df$date<-as.Date(df$date)

df$transformed<-as.numeric(df$transformed)

# Convert the data to a time series object (ts)
ts_data <- ts(df$transformed)
 
TSLSTM <- ts.lstm(ts=ts_data,
                 tsLag=30,
                 LSTMUnits=7,
                 DropoutRate = 0.1,
                 Epochs = 10,
                 CompLoss = "mse",
                 CompMetrics = "mae",
                 ActivationFn = "tanh",
                 SplitRatio = 0.99,
                 ValidationSplit = 0.2)
 
#Return function
trainFittedValue <- TSLSTM$TrainFittedValue
testPredictedValue <- TSLSTM$TestPredictedValue
accuracyTable <- TSLSTM$AccuracyTable

Result30<-tail(df,15)

Result30$S_pred<-testPredictedValue

Result30$Prediction= Result30$S_pred * ( max(df$meantemp) - min(df$meantemp) ) + min(df$meantemp)
```

```{r}
Result30$date <- as.Date(Result30$date)
# Calculate label positions
label_pos <- data.frame(label = c("Original", "Prediction"),
                        y = c(max(Result30$meantemp), max(Result30$Prediction)),
                        label_color = c("blue", "red"))
ggplot(data = Result30) +
  geom_line(aes(x = date, y = meantemp), color = "blue") +
  geom_line(aes(x = date, y = Prediction), color = "red") +
  labs(x = "Date", y = "Mean Temperature (Â°C)",  # Updated y-axis label with units
       title = "Original Temperature Over Time for Lag 30") +  # Plot title
  annotate("text", x = max(Result30$date) + 1, y = label_pos$y, 
           label = label_pos$label, color = label_pos$label_color, vjust = 0.5) +
  theme(axis.text.y = element_text(size = 12),   # Set font size for y-axis tick labels
        axis.title.y = element_text(size = 14),  # Set font size for y-axis label
        axis.text.x = element_text(size = 12),   # Set font size for x-axis tick labels
        axis.title.x = element_text(size = 14),  # Set font size for x-axis label
        plot.title = element_text(size = 16, hjust = 0.5))  # Set font size for plot title
```

## Lag=20

```{r}
library(TSLSTM)

df <- mean_temp

df$date<-as.Date(df$date)

df$transformed<-as.numeric(df$transformed)

# Convert the data to a time series object (ts)
ts_data <- ts(df$transformed)
 
TSLSTM <- ts.lstm(ts=ts_data,
                 tsLag=20,
                 LSTMUnits=7,
                 DropoutRate = 0.1,
                 Epochs = 10,
                 CompLoss = "mse",
                 CompMetrics = "mae",
                 ActivationFn = "tanh",
                 SplitRatio = 0.99,
                 ValidationSplit = 0.2)
 
#Return function
trainFittedValue <- TSLSTM$TrainFittedValue
testPredictedValue <- TSLSTM$TestPredictedValue
accuracyTable <- TSLSTM$AccuracyTable

Result20<-tail(df,15)

Result20$S_pred<-testPredictedValue

Result20$Prediction= Result20$S_pred * ( max(df$meantemp) - min(df$meantemp) ) + min(df$meantemp)
```

```{r}
Result20$date <- as.Date(Result20$date)
# Calculate label positions
label_pos <- data.frame(label = c("Original", "Prediction"),
                        y = c(max(Result20$meantemp), max(Result20$Prediction)),
                        label_color = c("blue", "red"))
ggplot(data = Result20) +
  geom_line(aes(x = date, y = meantemp), color = "blue") +
  geom_line(aes(x = date, y = Prediction), color = "red") +
  labs(x = "Date", y = "Mean Temperature (Â°C)",  # Updated y-axis label with units
       title = "Original Temperature Over Time for Lag 20") +  # Plot title
  annotate("text", x = max(Result20$date) + 1, y = label_pos$y, 
           label = label_pos$label, color = label_pos$label_color, vjust = 0.5) +
  theme(axis.text.y = element_text(size = 12),   # Set font size for y-axis tick labels
        axis.title.y = element_text(size = 14),  # Set font size for y-axis label
        axis.text.x = element_text(size = 12),   # Set font size for x-axis tick labels
        axis.title.x = element_text(size = 14),  # Set font size for x-axis label
        plot.title = element_text(size = 16, hjust = 0.5))  # Set font size for plot title
```

## Lag=10

```{r}
library(TSLSTM)

df <- mean_temp

df$date<-as.Date(df$date)

df$transformed<-as.numeric(df$transformed)

# Convert the data to a time series object (ts)
ts_data <- ts(df$transformed)
 
TSLSTM <- ts.lstm(ts=ts_data,
                 tsLag=10,
                 LSTMUnits=7,
                 DropoutRate = 0.1,
                 Epochs = 10,
                 CompLoss = "mse",
                 CompMetrics = "mae",
                 ActivationFn = "tanh",
                 SplitRatio = 0.99,
                 ValidationSplit = 0.2)
 
#Return function
trainFittedValue <- TSLSTM$TrainFittedValue
testPredictedValue <- TSLSTM$TestPredictedValue
accuracyTable <- TSLSTM$AccuracyTable

Result15<-tail(df,15)

Result15$S_pred<-testPredictedValue

Result15$Prediction= Result15$S_pred * ( max(df$meantemp) - min(df$meantemp) ) + min(df$meantemp)
```

```{r}
Result15$date <- as.Date(Result15$date)
# Calculate label positions
label_pos <- data.frame(label = c("Original", "Prediction"),
                        y = c(max(Result15$meantemp), max(Result15$Prediction)),
                        label_color = c("blue", "red"))
ggplot(data = Result15) +
  geom_line(aes(x = date, y = meantemp), color = "blue") +
  geom_line(aes(x = date, y = Prediction), color = "red") +
  labs(x = "Date", y = "Mean Temperature (Â°C)",  # Updated y-axis label with units
       title = "Original Temperature Over Time for Lag 10") +  # Plot title
  annotate("text", x = max(Result15$date) + 1, y = label_pos$y, 
           label = label_pos$label, color = label_pos$label_color, vjust = 0.5) +
  theme(axis.text.y = element_text(size = 12),   # Set font size for y-axis tick labels
        axis.title.y = element_text(size = 14),  # Set font size for y-axis label
        axis.text.x = element_text(size = 12),   # Set font size for x-axis tick labels
        axis.title.x = element_text(size = 14),  # Set font size for x-axis label
        plot.title = element_text(size = 16, hjust = 0.5))  # Set font size for plot title
```

## Lag=5

```{r}
library(TSLSTM)
# 
 df <- mean_temp
# 
 df$date<-as.Date(df$date)
# 
 TSLSTM<-ts.lstm(ts=df$transformed,
                 tsLag=5,
                 LSTMUnits=7,
                 DropoutRate = 0.1,
                 Epochs = 10,
                 CompLoss = "mse",
                 CompMetrics = "mae",
                 ActivationFn = "tanh",
                 SplitRatio = 0.99,
                 ValidationSplit = 0.2)
# 
# #Return function
 trainFittedValue <- TSLSTM$TrainFittedValue
 testPredictedValue <- TSLSTM$TestPredictedValue
 accuracyTable <- TSLSTM$AccuracyTable
# 
 Result5<-tail(df,15)
# 
 Result5$S_pred<-testPredictedValue
# 
 Result5$Prediction= Result5$S_pred * ( max(df$meantemp) - min(df$meantemp) ) + min(df$meantemp)
```

### Accuracy table for Lag=5

```{r}
print(accuracyTable)

```

## Model Validation plot for Lag=5

```{r}
Result5$date <- as.Date(Result5$date)
# Calculate label positions
label_pos <- data.frame(label = c("Original", "Prediction"),
                        y = c(max(Result5$meantemp), max(Result5$Prediction)),
                        label_color = c("blue", "red"))
ggplot(data = Result5) +
  geom_line(aes(x = date, y = meantemp), color = "blue") +
  geom_line(aes(x = date, y = Prediction), color = "red") +
  labs(x = "Date", y = "Mean Temperature (Â°C)",  # Updated y-axis label with units
       title = "Original Temperature Over Time for Lag 5") +  # Plot title
  annotate("text", x = max(Result5$date) + 1, y = label_pos$y, 
           label = label_pos$label, color = label_pos$label_color, vjust = 0.5) +
  theme(axis.text.y = element_text(size = 12),   # Set font size for y-axis tick labels
        axis.title.y = element_text(size = 14),  # Set font size for y-axis label
        axis.text.x = element_text(size = 12),   # Set font size for x-axis tick labels
        axis.title.x = element_text(size = 14),  # Set font size for x-axis label
        plot.title = element_text(size = 16, hjust = 0.5))  # Set font size for plot title
```

## Decision

As we can see from the graphs, for Lag 50,40,30,20,10 and 5 we are getting the best prediction for **Lag=5**. Our prediction is matching the trend with actual data. So we are finalizing Lag=5 for our model.

## Conclusion

Our Time series prediction using LSTM has demonstrated promising results in forecasting accuracy. During the training phase, the root mean square error (RMSE) of 0.0800 and the mean absolute percentage error (MAPE) of 0.1258 indicate that the LSTM model was able to effectively capture the underlying patterns and trends in the training data.

## Conclusion Cont..

-   Upon evaluating the model's performance on the test dataset, we obtained an RMSE of 0.1039 and a MAPE of 0.1274.

-   These results signify that the LSTM model successfully generalized to unseen data, showcasing its ability to make accurate predictions beyond the training data.

-   Overall, the relatively low values of both RMSE and MAPE for both the training and test phases highlight the effectiveness of the LSTM model in handling time series data.

## Acknowledgement

â¢ This dataset ownership and collection credit goes to Weather Undergroud API.

â¢ Special thanks to Dr. Achraf Cohen for all his guidance throughout the project.

## References
